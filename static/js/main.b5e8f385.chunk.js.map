{"version":3,"sources":["redux/actionType.js","constants/variables.js","redux/reducers/todos.js","redux/reducers/filter.js","redux/reducers/index.js","redux/reducers/error.js","redux/store.js","serviceWorker.js","redux/selectors.js","redux/actionCreators.js","constants/text.js","components/Todo.js","components/InputTodo.js","components/Filter.js","components/ButtonBar.js","components/ErrorMessage.js","TodoList.js","index.js"],"names":["TODO_ADD","TODO_DONE","TODO_EDIT","TODO_DELETE","TODO_DELETE_DONE","TODO_SAVE","FILTER_SET","ERROR_SET","LOCAL_STORAGE_KEY","FILTER_KEY","initialState","todos","stateData","localStorage","getItem","indexOf","JSON","parse","INITIAL_STATE","combineReducers","todosState","state","action","type","id","content","payload","isDone","map","todo","filter","setItem","stringify","filterState","filterSelected","errorState","errorMessage","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","selectTodos","selectCount","COUNT_ALL","length","COUNT_DONE","all","done","undone","selectError","errorSet","FILTER_CONTENT","BUTTON_TEXT","Todo","dispatch","useDispatch","InputGroup","className","Prepend","Button","variant","active","onClick","FormControl","value","disabled","onChange","event","target","Append","InputTodo","useState","setValue","placeholder","Filter","useSelector","count","ToggleButtonGroup","name","ToggleButton","Badge","ButtonBar","ErrorMessage","Alert","onClose","dismissible","TodoList","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yLAAaA,EAAW,WACXC,EAAY,YACZC,EAAY,YACZC,EAAc,cACdC,EAAmB,mBACnBC,EAAY,YACZC,EAAa,aACbC,EAAY,YCPZC,EAAoB,sBAEpBC,EAAoB,MAApBA,EAAiC,OAAjCA,EAAiD,SCQ1DC,EAAe,CAAEC,MAAO,IACxBC,EAAYC,aAAaC,QAAQN,GAEnCI,IACgC,IAAhCA,EAAUG,QAAQ,WACU,IAA5BH,EAAUG,QAAQ,OAElBL,EAAeM,KAAKC,MAAML,ICd5B,IAAMM,EAAgBT,ECEPU,kBAAgB,CAC7BC,WFca,WAAqD,IAA/BC,EAA8B,uDAAtBX,EAAcY,EAAQ,uCACjE,OAAQA,EAAOC,MACb,KAAKvB,EACH,OAAO,2BACFqB,GADL,IAEEV,MAAM,CACJ,CACEa,GAAIH,EAAMV,MAAM,GAAKU,EAAMV,MAAM,GAAGa,GAAK,EAAI,EAC7CC,QAASH,EAAOI,QAAQD,QACxBE,OAAQL,EAAOI,QAAQC,SAJtB,mBAMAN,EAAMV,UAIf,KAAKV,EACH,OAAO,2BACFoB,GADL,IAEEV,MAAOU,EAAMV,MAAMiB,KAAI,SAACC,GACtB,OAAIA,EAAKL,KAAOF,EAAOI,QAAQF,GAAWK,EACnC,2BAAKA,GAAZ,IAAkBF,QAASE,EAAKF,cAItC,KAAKzB,EACH,OAAO,2BACFmB,GADL,IAEEV,MAAOU,EAAMV,MAAMiB,KAAI,SAACC,GACtB,OAAIA,EAAKL,KAAOF,EAAOI,QAAQF,GAAWK,EACnC,2BAAKA,GAAZ,IAAkBJ,QAASH,EAAOI,QAAQD,eAIhD,KAAKtB,EACH,OAAO,2BACFkB,GADL,IAEEV,MAAOU,EAAMV,MAAMmB,QAAO,SAACD,GAAD,OAAUA,EAAKL,KAAOF,EAAOI,QAAQF,QAGnE,KAAKpB,EACH,OAAO,2BACFiB,GADL,IAEEV,MAAOU,EAAMV,MAAMmB,QAAO,SAACD,GAAD,OAAWA,EAAKF,YAG9C,KAAKtB,EAEH,OADAQ,aAAakB,QAAQvB,EAAmBQ,KAAKgB,UAAUX,IAChDA,EAET,QACE,OAAOA,IE/DXY,YDFa,WAAuD,IAAhCZ,EAA+B,uDAAvBH,EAAeI,EAAQ,uCACnE,OAAQA,EAAOC,MACb,KAAKjB,EACH,OAAOgB,EAAOI,QAAQQ,eAExB,QACE,OAAOb,ICHXc,WCJa,WAAsD,IAAhCd,EAA+B,uDAF9C,GAEsCC,EAAQ,uCAClE,OAAQA,EAAOC,MACb,KAAKhB,EACH,OAAOe,EAAOI,QAAQU,aAExB,QACE,OAAOf,MCPEgB,cACbC,EACAC,OAAOC,8BAAgCD,OAAOC,gC,OCO5BC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DChBC,IAAMC,EAAc,SAACxB,GAC1B,OAAQA,EAAMY,aACZ,KAAKxB,EACH,OAAOY,EAAMD,WAAWT,MAE1B,KAAKF,EACH,OAAOY,EAAMD,WAAWT,MAAMmB,QAAO,SAACD,GAAD,OAAUA,EAAKF,UAEtD,KAAKlB,EACH,OAAOY,EAAMD,WAAWT,MAAMmB,QAAO,SAACD,GAAD,OAAWA,EAAKF,UAEvD,QACE,OAAON,EAAMD,WAAWT,QAMjBmC,EAAc,SAACzB,GAC1B,IAAM0B,EAAY1B,EAAMD,WAAWT,MAAMqC,OACnCC,EAAa5B,EAAMD,WAAWT,MAAMmB,QAAO,SAACD,GAAD,OAAUA,EAAKF,UAC7DqB,OACH,MAAO,CAAEE,IAAKH,EAAWI,KAAMF,EAAYG,OAAQL,EAAYE,IAGpDI,EAAc,SAAChC,GAAD,OAAWA,EAAMc,Y,wBCiB/BmB,EAAW,SAAClB,GAAD,MAAmB,CACzCb,KAAMhB,EACNmB,QAAS,CAAEU,kBC3CPmB,EAAwB,eAAxBA,EAAoC,eAApCA,EAAkD,qBAClDC,EACC,eADDA,EAEE,eAFFA,EAGI,qBAHJA,EAII,eAJJA,EAKE,eALFA,EAMQ,2BCJC,SAASC,EAAT,GAAyB,IAAT5B,EAAQ,EAARA,KACvB6B,EAAWC,cAKjB,OACE,eAACC,EAAA,EAAD,CAAYC,UAAU,YAAtB,UACE,cAACD,EAAA,EAAWE,QAAZ,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,eACRC,OAAQpC,EAAKF,OACbuC,QAVkB,kBAAMR,GFQTlC,EER2BK,EAAKL,GFQxB,CAC/BD,KAAMtB,EACNyB,QAAS,CAAEF,SAFW,IAACA,GEDjB,SAKGK,EAAKF,OAAS6B,EAAmBA,MAGtC,cAACW,EAAA,EAAD,CACEC,MAAOvC,EAAKJ,QACZ4C,SAAUxC,EAAKF,OACf2C,SAjBkB,SAACC,GAAD,OACtBb,GFWqBlC,EEXHK,EAAKL,GFWEC,EEXE8C,EAAMC,OAAOJ,MFWF,CACxC7C,KAAMrB,EACNwB,QAAS,CAAEF,KAAIC,cAFO,IAACD,EAAIC,KEOvB,cAACmC,EAAA,EAAWa,OAAZ,UACE,cAACV,EAAA,EAAD,CAAQC,QAAQ,iBAAiBE,QAlBX,kBAAMR,GFeTlC,EEf6BK,EAAKL,GFe1B,CACjCD,KAAMpB,EACNuB,QAAS,CAAEF,SAFa,IAACA,GEGnB,SACGgC,S,YCxBI,SAASkB,IACtB,IAAMhB,EAAWC,cADiB,EAERgB,mBAAS,IAFD,mBAE3BP,EAF2B,KAEpBQ,EAFoB,KASlC,OACE,eAAChB,EAAA,EAAD,CAAYC,UAAU,OAAtB,UACE,cAACM,EAAA,EAAD,CACEC,MAAOA,EACPS,YFlBY,wDEmBZP,SAXc,SAAC,GAAD,IAAGE,EAAH,EAAGA,OAAH,OAAgBI,EAASJ,EAAOJ,UAahD,cAACR,EAAA,EAAWa,OAAZ,UACE,cAACV,EAAA,EAAD,CAAQC,QAAQ,oBAAoBE,QAbhB,WACxB,GAAc,KAAVE,EAAc,OAAOV,EAASJ,EFThB,qDEUlBI,EHDyC,CAC3CnC,KAAMvB,EACN0B,QAAS,CAAED,QGDQ2C,EHCCzC,QGDM,KACxBiD,EAAS,KAUL,SACGpB,S,4BCjBI,SAASsB,IACtB,IAAMhD,EAASiD,YAAYlC,GACrBmC,EAAQD,YAAYjC,GACpBY,EAAWC,cAEjB,OACE,eAACsB,EAAA,EAAD,CACE1D,KAAK,QACL2D,KAAK,SACLd,MAAOtC,EACPwC,SANyB,SAACF,GAAD,OAAWV,EJ4BI,CAC5CnC,KAAMjB,EACNoB,QAAS,CAAEQ,eI9BgDkC,MAEzD,UAME,eAACe,EAAA,EAAD,CAAcf,MAAO3D,EAAgBuD,QAAQ,oBAA7C,UACGT,EACD,cAAC6B,EAAA,EAAD,CAAOvB,UAAU,OAAOG,QAAQ,QAAhC,SACGgB,EAAM9B,SAGX,eAACiC,EAAA,EAAD,CAAcf,MAAO3D,EAAiBuD,QAAQ,oBAA9C,UACGT,EACD,cAAC6B,EAAA,EAAD,CAAOvB,UAAU,OAAOG,QAAQ,QAAhC,SACGgB,EAAM7B,UAGX,eAACgC,EAAA,EAAD,CAAcf,MAAO3D,EAAmBuD,QAAQ,oBAAhD,UACGT,EACD,cAAC6B,EAAA,EAAD,CAAOvB,UAAU,OAAOG,QAAQ,QAAhC,SACGgB,EAAM5B,eC5BF,SAASiC,IACtB,IAAM3B,EAAWC,cAGjB,OACE,sBAAKE,UAAU,sEAAf,UACE,cAACE,EAAA,EAAD,CAAQC,QAAQ,eAAeE,QAJZ,kBAAMR,EL2BA,CAC7BnC,KAAMlB,KKxBF,SACGmD,IAEH,cAACsB,EAAD,IACA,cAACf,EAAA,EAAD,CAAQC,QAAQ,SAASE,QAPA,kBAAMR,ELsBA,CACnCnC,KAAMnB,KKhBF,SACGoD,O,YCZM,SAAS8B,IACtB,IAAMlD,EAAe2C,YAAY1B,GAC3BK,EAAWC,cAEjB,MAAqB,KAAjBvB,EAEA,cAACmD,EAAA,EAAD,CAAOvB,QAAQ,SAASwB,QAHN,kBAAM9B,EAASJ,EAAS,MAGMmC,aAAW,EAA3D,SACGrD,IAGA,GCPM,SAASsD,KACtB,IAAM/E,EAAQoE,YAAYlC,GAC1B,OACE,sBAAKgB,UAAU,YAAf,UACE,oBAAIA,UAAU,sBAAd,SNZQ,cMaR,cAACyB,EAAD,IACA,cAACZ,EAAD,IACA,8BACG/D,EAAMqC,OACHrC,EAAMiB,KAAI,SAACC,GAAD,OAAU,cAAC4B,EAAD,CAAoB5B,KAAMA,GAAfA,EAAKL,OACpC,KAEN,cAAC6D,EAAD,OCbNM,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAACH,GAAD,MAEFI,SAASC,eAAe,SVwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b5e8f385.chunk.js","sourcesContent":["export const TODO_ADD = \"TODO_ADD\";\nexport const TODO_DONE = \"TODO_DONE\";\nexport const TODO_EDIT = \"TODO_EDIT\";\nexport const TODO_DELETE = \"TODO_DELETE\";\nexport const TODO_DELETE_DONE = \"TODO_DELETE_DONE\";\nexport const TODO_SAVE = \"TODO_SAVE\";\nexport const FILTER_SET = \"FILTER_SET\";\nexport const ERROR_SET = \"ERROR_SET\";\n","export const LOCAL_STORAGE_KEY = \"ZoeHYHTodoListRedux\";\n\nexport const FILTER_KEY = { all: \"all\", done: \"done\", undone: \"undone\" };\n","import {\n  TODO_ADD,\n  TODO_DONE,\n  TODO_EDIT,\n  TODO_DELETE,\n  TODO_DELETE_DONE,\n  TODO_SAVE,\n} from \"../actionType\";\nimport { LOCAL_STORAGE_KEY } from \"../../constants/variables\";\n\nlet initialState = { todos: [] };\nlet stateData = localStorage.getItem(LOCAL_STORAGE_KEY);\nif (\n  stateData &&\n  stateData.indexOf(\"todos\") !== -1 &&\n  stateData.indexOf(\"[\") !== -1\n) {\n  initialState = JSON.parse(stateData);\n}\n\nexport default function todosReducer(state = initialState, action) {\n  switch (action.type) {\n    case TODO_ADD: {\n      return {\n        ...state,\n        todos: [\n          {\n            id: state.todos[0] ? state.todos[0].id + 1 : 1,\n            content: action.payload.content,\n            isDone: action.payload.isDone,\n          },\n          ...state.todos,\n        ],\n      };\n    }\n    case TODO_DONE: {\n      return {\n        ...state,\n        todos: state.todos.map((todo) => {\n          if (todo.id !== action.payload.id) return todo;\n          return { ...todo, isDone: !todo.isDone };\n        }),\n      };\n    }\n    case TODO_EDIT: {\n      return {\n        ...state,\n        todos: state.todos.map((todo) => {\n          if (todo.id !== action.payload.id) return todo;\n          return { ...todo, content: action.payload.content };\n        }),\n      };\n    }\n    case TODO_DELETE: {\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo.id !== action.payload.id),\n      };\n    }\n    case TODO_DELETE_DONE: {\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => !todo.isDone),\n      };\n    }\n    case TODO_SAVE: {\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\n      return state;\n    }\n    default:\n      return state;\n  }\n}\n","import { FILTER_SET } from \"../actionType\";\nimport { FILTER_KEY } from \"../../constants/variables\";\n\nconst INITIAL_STATE = FILTER_KEY.all;\n\nexport default function filterReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case FILTER_SET: {\n      return action.payload.filterSelected;\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport todos from \"./todos\";\nimport filter from \"./filter\";\nimport error from \"./error\";\n\nexport default combineReducers({\n  todosState: todos,\n  filterState: filter,\n  errorState: error,\n});\n","import { ERROR_SET } from \"../actionType\";\n\nconst INITIAL_STATE = \"\";\n\nexport default function errorReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case ERROR_SET: {\n      return action.payload.errorMessage;\n    }\n    default:\n      return state;\n  }\n}\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { FILTER_KEY } from \"../constants/variables\";\n\nexport const selectTodos = (state) => {\n  switch (state.filterState) {\n    case FILTER_KEY.all: {\n      return state.todosState.todos;\n    }\n    case FILTER_KEY.done: {\n      return state.todosState.todos.filter((todo) => todo.isDone);\n    }\n    case FILTER_KEY.undone: {\n      return state.todosState.todos.filter((todo) => !todo.isDone);\n    }\n    default:\n      return state.todosState.todos;\n  }\n};\n\nexport const selectFilter = (state) => state.filterState;\n\nexport const selectCount = (state) => {\n  const COUNT_ALL = state.todosState.todos.length;\n  const COUNT_DONE = state.todosState.todos.filter((todo) => todo.isDone)\n    .length;\n  return { all: COUNT_ALL, done: COUNT_DONE, undone: COUNT_ALL - COUNT_DONE };\n};\n\nexport const selectError = (state) => state.errorState;\n","import {\n  TODO_ADD,\n  TODO_DONE,\n  TODO_EDIT,\n  TODO_DELETE,\n  TODO_DELETE_DONE,\n  TODO_SAVE,\n  FILTER_SET,\n  ERROR_SET,\n} from \"./actionType\";\n\nexport const todoAdd = (content, isDone) => ({\n  type: TODO_ADD,\n  payload: { content, isDone },\n});\n\nexport const todoDone = (id) => ({\n  type: TODO_DONE,\n  payload: { id },\n});\n\nexport const todoEdit = (id, content) => ({\n  type: TODO_EDIT,\n  payload: { id, content },\n});\n\nexport const todoDelete = (id) => ({\n  type: TODO_DELETE,\n  payload: { id },\n});\n\nexport const todoDeleteDone = () => ({\n  type: TODO_DELETE_DONE,\n});\n\nexport const todoSave = () => ({\n  type: TODO_SAVE,\n});\n\nexport const filterSet = (filterSelected) => ({\n  type: FILTER_SET,\n  payload: { filterSelected },\n});\n\nexport const errorSet = (errorMessage) => ({\n  type: ERROR_SET,\n  payload: { errorMessage },\n});\n","const TITLE = \"TODO LIST\";\nconst EXPLANATION = \"在這裡輸入新的 Todo！\";\nconst EMPTY_MESSAGE = \"你沒有輸入 Todo 喔！\";\nconst FILTER_CONTENT = { all: \"全部\", done: \"完成\", undone: \"未完成\" };\nconst BUTTON_TEXT = {\n  add: \"新增\",\n  done: \"完成\",\n  undone: \"未完成\",\n  delete: \"刪除\",\n  save: \"儲存\",\n  deleteDone: \"完成刪除\",\n};\n\nexport { TITLE, EXPLANATION, EMPTY_MESSAGE, FILTER_CONTENT, BUTTON_TEXT };\n","import { InputGroup, FormControl, Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport { todoDone, todoEdit, todoDelete } from \"../redux/actionCreators\";\nimport { BUTTON_TEXT } from \"../constants/text\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function Todo({ todo }) {\n  const dispatch = useDispatch();\n  const handleDoneOnclick = () => dispatch(todoDone(todo.id));\n  const handleInputEdit = (event) =>\n    dispatch(todoEdit(todo.id, event.target.value));\n  const handleDeleteOnclick = () => dispatch(todoDelete(todo.id));\n  return (\n    <InputGroup className=\"todo mb-3\">\n      <InputGroup.Prepend>\n        <Button\n          variant=\"outline-info\"\n          active={todo.isDone}\n          onClick={handleDoneOnclick}\n        >\n          {todo.isDone ? BUTTON_TEXT.done : BUTTON_TEXT.undone}\n        </Button>\n      </InputGroup.Prepend>\n      <FormControl\n        value={todo.content}\n        disabled={todo.isDone}\n        onChange={handleInputEdit}\n      />\n      <InputGroup.Append>\n        <Button variant=\"outline-danger\" onClick={handleDeleteOnclick}>\n          {BUTTON_TEXT.delete}\n        </Button>\n      </InputGroup.Append>\n    </InputGroup>\n  );\n}\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    isDone: PropTypes.bool,\n  }),\n};\n","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { InputGroup, FormControl, Button } from \"react-bootstrap\";\nimport { EXPLANATION, EMPTY_MESSAGE, BUTTON_TEXT } from \"../constants/text\";\nimport { errorSet, todoAdd } from \"../redux/actionCreators\";\n\nexport default function InputTodo() {\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(\"\");\n  const handleInput = ({ target }) => setValue(target.value);\n  const handleInputSubmit = () => {\n    if (value === \"\") return dispatch(errorSet(EMPTY_MESSAGE));\n    dispatch(todoAdd(value, false));\n    setValue(\"\");\n  };\n  return (\n    <InputGroup className=\"my-3\">\n      <FormControl\n        value={value}\n        placeholder={EXPLANATION}\n        onChange={handleInput}\n      />\n      <InputGroup.Append>\n        <Button variant=\"outline-secondary\" onClick={handleInputSubmit}>\n          {BUTTON_TEXT.add}\n        </Button>\n      </InputGroup.Append>\n    </InputGroup>\n  );\n}\n","import { ToggleButtonGroup, ToggleButton, Badge } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FILTER_CONTENT } from \"../constants/text\";\nimport { FILTER_KEY } from \"../constants/variables\";\nimport { filterSet } from \"../redux/actionCreators\";\nimport { selectCount, selectTodos } from \"../redux/selectors\";\n\nexport default function Filter() {\n  const filter = useSelector(selectTodos);\n  const count = useSelector(selectCount);\n  const dispatch = useDispatch();\n  const handleFilterOnchange = (value) => dispatch(filterSet(value));\n  return (\n    <ToggleButtonGroup\n      type=\"radio\"\n      name=\"filter\"\n      value={filter}\n      onChange={handleFilterOnchange}\n    >\n      <ToggleButton value={FILTER_KEY.all} variant=\"outline-secondary\">\n        {FILTER_CONTENT.all}\n        <Badge className=\"ml-1\" variant=\"light\">\n          {count.all}\n        </Badge>\n      </ToggleButton>\n      <ToggleButton value={FILTER_KEY.done} variant=\"outline-secondary\">\n        {FILTER_CONTENT.done}\n        <Badge className=\"ml-1\" variant=\"light\">\n          {count.done}\n        </Badge>\n      </ToggleButton>\n      <ToggleButton value={FILTER_KEY.undone} variant=\"outline-secondary\">\n        {FILTER_CONTENT.undone}\n        <Badge className=\"ml-1\" variant=\"light\">\n          {count.undone}\n        </Badge>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n","import { useDispatch } from \"react-redux\";\nimport Filter from \"./Filter\";\nimport { Button } from \"react-bootstrap\";\nimport { todoDeleteDone, todoSave } from \"../redux/actionCreators\";\nimport { BUTTON_TEXT } from \"../constants/text\";\n\nexport default function ButtonBar() {\n  const dispatch = useDispatch();\n  const handleTodoSave = () => dispatch(todoSave());\n  const handleTodoDeleteDone = () => dispatch(todoDeleteDone());\n  return (\n    <div className=\"container d-flex justify-content-between fixed-bottom py-3 bg-white\">\n      <Button variant=\"outline-info\" onClick={handleTodoSave}>\n        {BUTTON_TEXT.save}\n      </Button>\n      <Filter />\n      <Button variant=\"danger\" onClick={handleTodoDeleteDone}>\n        {BUTTON_TEXT.deleteDone}\n      </Button>\n    </div>\n  );\n}\n","import { Alert } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectError } from \"../redux/selectors\";\nimport { errorSet } from \"../redux/actionCreators\";\n\nexport default function ErrorMessage() {\n  const errorMessage = useSelector(selectError);\n  const dispatch = useDispatch();\n  const handleOnClose = () => dispatch(errorSet(\"\"));\n  if (errorMessage !== \"\")\n    return (\n      <Alert variant=\"danger\" onClose={handleOnClose} dismissible>\n        {errorMessage}\n      </Alert>\n    );\n  return \"\";\n}\n","import { useSelector } from \"react-redux\";\nimport { selectTodos } from \"./redux/selectors\";\nimport Todo from \"./components/Todo\";\nimport InputTodo from \"./components/InputTodo\";\nimport ButtonBar from \"./components/ButtonBar\";\nimport { TITLE } from \"./constants/text\";\nimport ErrorMessage from \"./components/ErrorMessage\";\n\nexport default function TodoList() {\n  const todos = useSelector(selectTodos);\n  return (\n    <div className=\"container\">\n      <h1 className=\"my-3 text-secondary\">{TITLE}</h1>\n      <ErrorMessage />\n      <InputTodo />\n      <div>\n        {todos.length\n          ? todos.map((todo) => <Todo key={todo.id} todo={todo} />)\n          : \"\"}\n      </div>\n      <ButtonBar />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport TodoList from \"./TodoList\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <TodoList />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}